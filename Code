using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro; // Import TextMeshPro namespace

public class ScoreCounter : MonoBehaviour {
    [Header("Dynamic")]
    public int score = 0;

    private TextMeshProUGUI uiText; // Use TextMeshProUGUI instead of Text

    void Start() {
        uiText = GetComponent<TextMeshProUGUI>(); // Get TMP component from GameObject
    }

    void Update() {
        uiText.text = score.ToString("#,0"); // Format number with commas
    }
}



using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro; // Needed for TextMeshProUGUI

public class HighScore : MonoBehaviour
{
    // Static backing fields
    private static TextMeshProUGUI _UI_TEXT;
    private static int _SCORE = 1000;

    // (Optional) instance reference, currently unused
    private TextMeshProUGUI txtCom;

    private void Awake()
    {
        // Cache the TMP component on this GameObject
        _UI_TEXT = GetComponent<TextMeshProUGUI>();

        // If we already have a saved HighScore, load it into SCORE (this also updates UI)
        if (PlayerPrefs.HasKey("HighScore"))
        {
            SCORE = PlayerPrefs.GetInt("HighScore");
        }
        else
        {
            // Initialize PlayerPrefs with default value and update UI
            PlayerPrefs.SetInt("HighScore", _SCORE);
            if (_UI_TEXT != null)
            {
                _UI_TEXT.text = "High Score: " + _SCORE.ToString("#,0");
            }
        }
    }

    public static int SCORE
    {
        get => _SCORE;
        private set
        {
            _SCORE = value;
            PlayerPrefs.SetInt("HighScore", value);

            if (_UI_TEXT != null)
            {
                _UI_TEXT.text = "High Score: " + value.ToString("#,0");
            }
        }
    }

    public static void TRY_SET_HIGH_SCORE(int scoreToTry)
    {
        // If scoreToTry is too low, do nothing
        if (scoreToTry <= SCORE) return;
        SCORE = scoreToTry;
    }

    [Tooltip("Check this box to reset the HighScore in PlayerPrefs")]
    public bool resetHighScoreNow = false;

    private void OnDrawGizmos()
    {
        if (resetHighScoreNow)
        {
            resetHighScoreNow = false;
            PlayerPrefs.SetInt("HighScore", 1000);
            Debug.LogWarning("PlayerPrefs HighScore reset to 1,000.");

            // Also reflect in runtime field/UI if component exists in editor
            _SCORE = 1000;
            if (_UI_TEXT != null)
            {
                _UI_TEXT.text = "High Score: " + _SCORE.ToString("#,0");
            }
        }
    }
}




using System.Collections;
using System.Collections.Generic;
using UnityEngine;

 public class Basket : MonoBehaviour {
 public ScoreCounter scoreCounter; 
 
 void Start () {

// Find a GameObject named ScoreCounter in the Scene
//Hierarchy
GameObject scoreGO = GameObject.Find( "ScoreCounter"); // b
// Get the ScoreCounter (Script) component of scoreGO
scoreCounter = scoreGO.GetComponent<ScoreCounter>(); 

 }

 void Update () {
 // Get the current screen position of the mouse from
//Input
 Vector3 mousePos2D = Input.mousePosition;
// a

 // The Cameraâ€™s z position sets how far to push the
//mouse into 3D
 // If this line causes a NullReferenceException,
//select the Main Camera
 // in the Hierarchy and set its tag to MainCamera in
//the Inspector.
 mousePos2D.z = -Camera.main.transform.position.z;
// b

 // Convert the point from 2D screen space into 3D
//game world space
 Vector3 mousePos3D = Camera.main.ScreenToWorldPoint(
mousePos2D ); // c

// Move the x position of this Basket to the x
//position of the Mouse
 Vector3 pos = this.transform.position;
 pos.x = mousePos3D.x;
 this.transform.position = pos;
 }
void OnCollisionEnter( Collision coll ) {
// a
// Find out what hit this basket
GameObject collidedWith = coll.gameObject;
// b
if ( collidedWith.CompareTag("Apple") ) {
// c
Destroy( collidedWith );

scoreCounter.score += 100;
HighScore.TRY_SET_HIGH_SCORE( scoreCounter.score);
 }
}
 }




using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement; 

public class ApplePicker : MonoBehaviour {
[Header("Inscribed")]
public GameObject basketPrefab;
public int numBaskets = 3;
public float basketBottomY = -14f;
public float basketSpacingY = 2f;
public List<GameObject> basketList; 

    void Start () {
        basketList = new List<GameObject>();

        for (int i=0; i <numBaskets; i++) {
            GameObject tBasketGO = Instantiate<GameObject>(
            basketPrefab );
            Vector3 pos = Vector3.zero;
        pos.y = basketBottomY + ( basketSpacingY * i );
        tBasketGO.transform.position = pos;
        basketList.Add( tBasketGO );
        }
    }
    public void AppleMissed() {
// a
 // Destroy all of the falling Apples
GameObject[]
appleArray=GameObject.FindGameObjectsWithTag("Apple"); //

 foreach ( GameObject tempGO in appleArray ) {
 Destroy( tempGO );
 }
 int basketIndex = basketList.Count -1;
 GameObject basketGO = basketList[basketIndex];

 basketList.RemoveAt( basketIndex );
 Destroy( basketGO );
 if ( basketList.Count == 0 ) {
SceneManager.LoadScene( "_Scene_0" );
// g
}
}
}





using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Apple : MonoBehaviour
{
    // Start is called before the first frame update
   public static float bottomY = -20f;
// b

void Update () {
if ( transform.position.y < bottomY ) {
Destroy( this.gameObject );
//

ApplePicker apScript =
Camera.main.GetComponent<ApplePicker>(); // b
// Call the public AppleMissed() method of apScript
apScript.AppleMissed(); 

}
}
}
